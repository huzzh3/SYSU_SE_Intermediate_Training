package imageProcessing;

import java.awt.Image;
import java.io.File;
import java.io.IOException;

import javax.imageio.stream.FileImageInputStream;

import imagereader.IImageIO;

public class ImplementImageIO implements IImageIO {
	
	private static final int BMP_LENGTH_BYTE = 54;	// There're 54 bytes in bmp file header and information header
	private static final int[] bitsNeedTobeTransfer = {24, 16, 8, 0};

	@Override
	public Image myRead(String filepath) throws IOException {
		/* 
		 * You need to read Bitmap from the filepath
		 */
		
		// Necessary variables
		File  file                 = null;
		Image image                = null;
		byte  fileAndInfoHeader[]  = new byte[BMP_LENGTH_BYTE]; // Used to store binary file header and information header
		byte  imageData[]          = null;						// Used to store image data (the pixel information of the location)
		int   pixel[]			   = null;						// One-dimension array to store pixel information (after trimming)
		int   BMPSize              = 0;
		int   size 				   = 0;
		int   width                = 0;
		int   height               = 0; 
		int   cur				   = 0;							// Used to scan the image data
		
		// Read the file, and store it to the fileAndInfoHeader
		file = new File(filepath);
		FileImageInputStream inputStream = new FileImageInputStream(file);
		inputStream.read(fileAndInfoHeader, 0, BMP_LENGTH_BYTE);
		
		// According to the BMP structure, we can get its size, width and height
		size = (int)(
				      (fileAndInfoHeader[37] & 0xff) << bitsNeedTobeTransfer[0] |
				      (fileAndInfoHeader[36] & 0xff) << bitsNeedTobeTransfer[1] |
				      (fileAndInfoHeader[35] & 0xff) << bitsNeedTobeTransfer[2] |
				   	  (fileAndInfoHeader[34] & 0xff) << bitsNeedTobeTransfer[3] 
                    );
		height = (int)(
					      (fileAndInfoHeader[25] & 0xff) << bitsNeedTobeTransfer[0] |
					      (fileAndInfoHeader[24] & 0xff) << bitsNeedTobeTransfer[1] |
					      (fileAndInfoHeader[23] & 0xff) << bitsNeedTobeTransfer[2] |
					   	  (fileAndInfoHeader[22] & 0xff) << bitsNeedTobeTransfer[3] 
					  );
		width = (int)(
					      (fileAndInfoHeader[21] & 0xff) << bitsNeedTobeTransfer[0] |
					      (fileAndInfoHeader[20] & 0xff) << bitsNeedTobeTransfer[1] |
					      (fileAndInfoHeader[19] & 0xff) << bitsNeedTobeTransfer[2] |
					   	  (fileAndInfoHeader[18] & 0xff) << bitsNeedTobeTransfer[3] 
					 );
		
		// Initialize the imageData to get the data of image
		imageData = new byte[size];
		inputStream.read(imageData, 0, size);
		
		// Trim the image data and store them in the pixel array
		pixel = new int[height * width];
		// Scan
		for (int i = height - 1; i >= 0; i--) {
			for (int j = 0; j < width; j++) {
				// Get RGB
				pixel[i * width + j] = (int)(
												(0xff)                      << bitsNeedTobeTransfer[0] |
												(imageData[cur + 2] & 0xff) << bitsNeedTobeTransfer[1] |
												(imageData[cur + 1] & 0xff) << bitsNeedTobeTransfer[2] |
												(imageData[cur + 0] & 0xff) << bitsNeedTobeTransfer[3]
											);
				// Move forward
				cur = cur + 3;
			}
		}
		
		
		return null;
	}

	@Override
	public Image myWrite(Image arg0, String arg1) throws IOException {
		return null;
	}

}
