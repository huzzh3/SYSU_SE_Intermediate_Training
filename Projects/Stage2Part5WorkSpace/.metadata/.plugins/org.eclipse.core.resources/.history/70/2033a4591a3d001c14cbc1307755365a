package sparseGrid;

import java.util.ArrayList;

import info.gridworld.grid.AbstractGrid;
import info.gridworld.grid.Location;

public class SparseBoundedGrid<E> extends AbstractGrid<E> {
	// The array storing the grid elements
	private SparseGridNode[] occupantArray;
	// The columnNum and rowNum storing the attributes of the grid
	private int columnNum;
	private int rowNum;
	
	// The constructor
	// You can use the constructor from the origin bounded grid
	public SparseBoundedGrid(int rows, int cols) {
		if (rows < 0) {
			throw new IllegalArgumentException("rows <= 0");
		}
		if (cols < 0) {
			throw new IllegalArgumentException("cols <= 0");
		}
		
		// Assign the attribute of the grid
		rowNum   = rows;
		columnNum = cols;
		
		// allocate the area for the array
		occupantArray = new SparseGridNode[rows];
	}
	
	// You need to create the interface to get the attribute of the grid
	public int getRowNum() {
		return rowNum;
	}
	public int getColumnNum() {
		return columnNum;
	}
	
	// You need to create the isValid method to check if the location is valid
	// You can reuse the method from the origin bounded grid
	public boolean isValid(Location location) {
		return 0 <= location.getRow() && location.getRow() < getRowNum() &&
			   0 <= location.getCol() && location.getCol() < getColumnNum();
 	}
	
	// The getOccupiedLocations method
	// You can reuse and change a little from the origin bounded grid method
	public ArrayList<Location> getOccupiedLocations() {
		ArrayList<Location> theLocations = new ArrayList<Location>();
		
		// Use the 'for' to travel the array
		for (int row = 0; row < getRowNum(); row++) {
			SparseGridNode tempPtr = occupantArray[row];
			
			// Search the link list
			while (tempPtr != null) {
				Location tempLocation = new Location(row, tempPtr.getColumn());
				
				// Add the valid location to array
			    theLocations.add(tempLocation);
			    tempPtr = tempPtr.getNext();
			}
		}
		
		return theLocations;
	}
	
	// The get method to get correspondent location
	// You can reuse the origin bounded grid method
	public E get(Location loc) {
		// check the loc
		if (!isValid(loc)) {
			throw new IllegalArgumentException("Location " + loc + " is not valid.");
		}
		
		// search the array
		SparseGridNode tempPtr = occupantArray[loc.getRow()];
		while (tempPtr != null) {
			// traverse to find the item at the location loc
			if (loc.getCol() == tempPtr.getColumn()) {
				return (E)tempPtr.getOccupant();
			}
			tempPtr = tempPtr.getNext();
		}
		
		return null;
	}
	
	// The put method to put item in the location
	public E put(Location loc, E obj) {
		// check the loc
		if (!isValid(loc)) {
			throw new IllegalArgumentException("Location " + loc + " is not valid.");
		}
		
		if (obj == null) {
			throw new NullPointerException("obj == null");
		}
		
		// Before you put the obj, you need to remove the correspondent object on the location
		E oldOccupant = remove(loc);
		
		// Then add the new obj
	}
}
